var searchIndex = {};
searchIndex["ascii"] = {"doc":"A library that provides ASCII-only string and character types, equivalent to the `char`, `str` and `String` types in the standard library.","items":[[3,"ToAsciiCharError","ascii","Error returned by `ToAsciiChar`.",null,null],[3,"AsciiStr","","AsciiStr represents a byte or string slice that only contains ASCII characters.",null,null],[3,"AsAsciiStrError","","Error that is returned when a sequence of `u8` are not all ASCII.",null,null],[3,"AsciiString","","A growable string stored as an ASCII encoded buffer.",null,null],[4,"AsciiChar","","An ASCII character. It wraps a `u8`, with the highest bit always zero.",null,null],[13,"Null","","`'\\0'`",0,null],[13,"SOH","","Start Of Heading",0,null],[13,"SOX","","Start Of teXt",0,null],[13,"ETX","","End of TeXt",0,null],[13,"EOT","","End Of Transmission",0,null],[13,"ENQ","","Enquiry",0,null],[13,"ACK","","Acknowledgement",0,null],[13,"Bell","","bell / alarm / audible",0,null],[13,"BackSpace","","Backspace",0,null],[13,"Tab","","`'\\t'`",0,null],[13,"LineFeed","","`'\\n'`",0,null],[13,"VT","","Vertical tab",0,null],[13,"FF","","Form Feed",0,null],[13,"CarriageReturn","","`'\\r'`",0,null],[13,"SI","","Shift In",0,null],[13,"SO","","Shift Out",0,null],[13,"DLE","","Data Link Escape",0,null],[13,"DC1","","Device control 1, often XON",0,null],[13,"DC2","","Device control 2",0,null],[13,"DC3","","Device control 3, Often XOFF",0,null],[13,"DC4","","Device control 4",0,null],[13,"NAK","","Negative AcKnowledgement",0,null],[13,"SYN","","Synchronous idle",0,null],[13,"ETB","","End of Transmission Block",0,null],[13,"CAN","","Cancel",0,null],[13,"EM","","End of Medium",0,null],[13,"SUB","","Substitute",0,null],[13,"ESC","","Escape",0,null],[13,"FS","","File Separator",0,null],[13,"GS","","Group Separator",0,null],[13,"RS","","Record Separator",0,null],[13,"US","","Unit Separator",0,null],[13,"Space","","`' '`",0,null],[13,"Exclamation","","`'!'`",0,null],[13,"Quotation","","`'\"'`",0,null],[13,"Hash","","`'#'`",0,null],[13,"Dollar","","`'$'`",0,null],[13,"Percent","","`'%'`",0,null],[13,"Ampersand","","`'&'`",0,null],[13,"Apostrophe","","`'\\''`",0,null],[13,"ParenOpen","","`'('`",0,null],[13,"ParenClose","","`')'`",0,null],[13,"Asterisk","","`'*'`",0,null],[13,"Plus","","`'+'`",0,null],[13,"Comma","","`','`",0,null],[13,"Minus","","`'-'`",0,null],[13,"Dot","","`'.'`",0,null],[13,"Slash","","`'/'`",0,null],[13,"_0","","`'0'`",0,null],[13,"_1","","`'1'`",0,null],[13,"_2","","`'2'`",0,null],[13,"_3","","`'3'`",0,null],[13,"_4","","`'4'`",0,null],[13,"_5","","`'5'`",0,null],[13,"_6","","`'6'`",0,null],[13,"_7","","`'7'`",0,null],[13,"_8","","`'8'`",0,null],[13,"_9","","`'9'`",0,null],[13,"Colon","","`':'`",0,null],[13,"Semicolon","","`';'`",0,null],[13,"LessThan","","`'<'`",0,null],[13,"Equal","","`'='`",0,null],[13,"GreaterThan","","`'>'`",0,null],[13,"Question","","`'?'`",0,null],[13,"At","","`'@'`",0,null],[13,"A","","`'A'`",0,null],[13,"B","","`'B'`",0,null],[13,"C","","`'C'`",0,null],[13,"D","","`'D'`",0,null],[13,"E","","`'E'`",0,null],[13,"F","","`'F'`",0,null],[13,"G","","`'G'`",0,null],[13,"H","","`'H'`",0,null],[13,"I","","`'I'`",0,null],[13,"J","","`'J'`",0,null],[13,"K","","`'K'`",0,null],[13,"L","","`'L'`",0,null],[13,"M","","`'M'`",0,null],[13,"N","","`'N'`",0,null],[13,"O","","`'O'`",0,null],[13,"P","","`'P'`",0,null],[13,"Q","","`'Q'`",0,null],[13,"R","","`'R'`",0,null],[13,"S","","`'S'`",0,null],[13,"T","","`'T'`",0,null],[13,"U","","`'U'`",0,null],[13,"V","","`'V'`",0,null],[13,"W","","`'W'`",0,null],[13,"X","","`'X'`",0,null],[13,"Y","","`'Y'`",0,null],[13,"Z","","`'Z'`",0,null],[13,"BracketOpen","","`'['`",0,null],[13,"BackSlash","","`'\\'`",0,null],[13,"BracketClose","","`']'`",0,null],[13,"Caret","","`'_'`",0,null],[13,"UnderScore","","`'_'`",0,null],[13,"Grave","","`'`'`",0,null],[13,"a","","`'a'`",0,null],[13,"b","","`'b'`",0,null],[13,"c","","`'c'`",0,null],[13,"d","","`'d'`",0,null],[13,"e","","`'e'`",0,null],[13,"f","","`'f'`",0,null],[13,"g","","`'g'`",0,null],[13,"h","","`'h'`",0,null],[13,"i","","`'i'`",0,null],[13,"j","","`'j'`",0,null],[13,"k","","`'k'`",0,null],[13,"l","","`'l'`",0,null],[13,"m","","`'m'`",0,null],[13,"n","","`'n'`",0,null],[13,"o","","`'o'`",0,null],[13,"p","","`'p'`",0,null],[13,"q","","`'q'`",0,null],[13,"r","","`'r'`",0,null],[13,"s","","`'s'`",0,null],[13,"t","","`'t'`",0,null],[13,"u","","`'u'`",0,null],[13,"v","","`'v'`",0,null],[13,"w","","`'w'`",0,null],[13,"x","","`'x'`",0,null],[13,"y","","`'y'`",0,null],[13,"z","","`'z'`",0,null],[13,"CurlyBraceOpen","","`'{'`",0,null],[13,"VerticalBar","","`'|'`",0,null],[13,"CurlyBraceClose","","`'}'`",0,null],[13,"Tilde","","`'~'`",0,null],[13,"DEL","","Delete",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"asciichar"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"asciichar"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"asciichar"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"asciichar"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"from","","Constructs an ASCII character from a `u8`, `char` or other character type.",0,{"inputs":[{"name":"c"}],"output":{"generics":["toasciicharerror"],"name":"result"}}],[11,"from_unchecked","","Constructs an ASCII character from a `char` or `u8` without any checks.",0,{"inputs":[{"name":"c"}],"output":{"name":"self"}}],[11,"as_byte","","Converts an ASCII character into a `u8`.",0,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"as_char","","Converts an ASCII character into a `char`.",0,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"is_alphabetic","","Check if the character is a letter (a-z, A-Z)",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_digit","","Check if the character is a number (0-9)",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_alphanumeric","","Check if the character is a letter or number",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_blank","","Check if the character is a space or horizontal tab",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_whitespace","","Check if the character is a ' ', '\\t', '\\n' or '\\r'",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_control","","Check if the character is a control character",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_graph","","Checks if the character is printable (except space)",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_print","","Checks if the character is printable (including space)",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lowercase","","Checks if the character is alphabetic and lowercase",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_uppercase","","Checks if the character is alphabetic and uppercase",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_punctuation","","Checks if the character is punctuation",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_hex","","Checks if the character is a valid hex digit",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_ascii","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",0,{"inputs":[{"name":"self"}],"output":{"name":"asciichar"}}],[11,"to_ascii_lowercase","","",0,{"inputs":[{"name":"self"}],"output":{"name":"asciichar"}}],[11,"eq_ignore_ascii_case","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"toasciicharerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"toasciicharerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_ascii_char","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["asciichar","toasciicharerror"],"name":"result"}}],[11,"to_ascii_char_unchecked","","",0,{"inputs":[{"name":"self"}],"output":{"name":"asciichar"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"ordering"}}],[11,"hash","","",2,null],[11,"new","","Coerces into an `AsciiStr` slice.",2,{"inputs":[{"name":"s"}],"output":{"name":"asciistr"}}],[11,"as_str","","Converts `&self` to a `&str` slice.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_bytes","","Converts `&self` into a byte slice.",2,null],[11,"as_slice","","Returns the entire string as slice of `AsciiChar`s.",2,null],[11,"as_mut_slice","","Returns the entire string as mutable slice of `AsciiChar`s.",2,null],[11,"as_ptr","","Returns a raw pointer to the `AsciiStr`'s buffer.",2,null],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the `AsciiStr`'s buffer.",2,null],[11,"to_ascii_string","","Copies the content of this `AsciiStr` into an owned `AsciiString`.",2,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[11,"from_ascii","","Converts anything that can represent a byte slice into an `AsciiStr`.",2,{"inputs":[{"name":"b"}],"output":{"generics":["asciistr","asasciistrerror"],"name":"result"}}],[11,"from_ascii_unchecked","","Converts anything that can be represented as a byte slice to an `AsciiStr` without checking for non-ASCII characters..",2,{"inputs":[{"name":"b"}],"output":{"name":"asciistr"}}],[11,"len","","Returns the number of characters / bytes in this ASCII sequence.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the ASCII slice contains zero bytes.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"trim","","Returns an ASCII string slice with leading and trailing whitespace removed.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"trim_left","","Returns an ASCII string slice with leading whitespace removed.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"trim_right","","Returns an ASCII string slice with trailing whitespace removed.",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"to_owned","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[11,"as_ref","","",2,null],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",2,null],[11,"as_mut","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"asciichar"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"asciichar"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"asciistr"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"}],"output":{"name":"asciistr"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"asciistr"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangeto"}],"output":{"name":"asciistr"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"asciistr"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"rangefrom"}],"output":{"name":"asciistr"}}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"asciistr"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"asciistr"}}],[11,"is_ascii","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[11,"to_ascii_lowercase","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[11,"eq_ignore_ascii_case","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"make_ascii_lowercase","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"asasciistrerror"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"asasciistrerror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"asasciistrerror"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"valid_up_to","","Returns the index of the first non-ASCII byte.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","Returns \"one or more bytes are not ASCII\"",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ascii_str","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["asciistr","asasciistrerror"],"name":"result"}}],[11,"as_ascii_str_unchecked","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"as_mut_ascii_str","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["asciistr","asasciistrerror"],"name":"result"}}],[11,"as_mut_ascii_str_unchecked","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"asciistring"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"asciistring"}],"output":{"name":"ordering"}}],[11,"hash","","",4,null],[11,"new","","Creates a new, empty ASCII string buffer without allocating.",4,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a new ASCII string buffer with the given capacity. The string will be able to hold exactly `capacity` bytes without reallocating. If `capacity` is 0, the ASCII string will not allocate.",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_raw_parts","","Creates a new `AsciiString` from a length, capacity and pointer.",4,null],[11,"from_ascii_unchecked","","Converts a vector of bytes to an `AsciiString` without checking for non-ASCII characters.",4,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"from_ascii","","Converts anything that can represent a byte buffer into an `AsciiString`.",4,{"inputs":[{"name":"b"}],"output":{"generics":["asciistring"],"name":"result"}}],[11,"push_str","","Pushes the given ASCII string onto this ASCII string buffer.",4,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":null}],[11,"capacity","","Returns the number of bytes that this ASCII string buffer can hold without reallocating.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted in the given `AsciiString`. The collection may reserve more space to avoid frequent reallocations.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be inserted in the given `AsciiString`. Does nothing if the capacity is already sufficient.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of this ASCII string buffer to match it's length.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"push","","Adds the given ASCII character to the end of the ASCII string.",4,{"inputs":[{"name":"self"},{"name":"asciichar"}],"output":null}],[11,"truncate","","Shortens a ASCII string to the specified length.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"pop","","Removes the last character from the ASCII string buffer and returns it. Returns `None` if this string buffer is empty.",4,{"inputs":[{"name":"self"}],"output":{"generics":["asciichar"],"name":"option"}}],[11,"remove","","Removes the ASCII character at position `idx` from the buffer and returns it.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"asciichar"}}],[11,"insert","","Inserts an ASCII character into the buffer at position `idx`.",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"asciichar"}],"output":null}],[11,"len","","Returns the number of bytes in this ASCII string.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the ASCII string contains zero bytes.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the ASCII string, setting length (but not capacity) to zero.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"borrow","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"from","","",4,{"inputs":[{"generics":["asciichar"],"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"into","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"as_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["asciistring","asasciistrerror"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"asciistring"}}],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"asciistring"}}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"asciistr"}],"output":{"name":"asciistring"}}],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"into_ascii_string_unchecked","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[11,"into_ascii_string","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["asciistring"],"name":"result"}}],[8,"ToAsciiChar","","Convert `char`, `u8` and other character types to `AsciiChar`.",null,null],[10,"to_ascii_char_unchecked","","Convert to `AsciiChar` without checking that it is an ASCII character.",5,{"inputs":[{"name":"self"}],"output":{"name":"asciichar"}}],[10,"to_ascii_char","","Convert to `AsciiChar`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["asciichar","toasciicharerror"],"name":"result"}}],[8,"AsAsciiStr","","Convert slices of bytes to `AsciiStr`.",null,null],[10,"as_ascii_str_unchecked","","Convert to an ASCII slice without checking for non-ASCII characters.",6,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[10,"as_ascii_str","","Convert to an ASCII slice.",6,{"inputs":[{"name":"self"}],"output":{"generics":["asciistr","asasciistrerror"],"name":"result"}}],[8,"AsMutAsciiStr","","Convert mutable slices of bytes to `AsciiStr`.",null,null],[10,"as_mut_ascii_str_unchecked","","Convert to a mutable ASCII slice without checking for non-ASCII characters.",7,{"inputs":[{"name":"self"}],"output":{"name":"asciistr"}}],[10,"as_mut_ascii_str","","Convert to a mutable ASCII slice.",7,{"inputs":[{"name":"self"}],"output":{"generics":["asciistr","asasciistrerror"],"name":"result"}}],[8,"IntoAsciiString","","Convert vectors into `AsciiString`.",null,null],[10,"into_ascii_string_unchecked","","Convert to `AsciiString` without checking for non-ASCII characters.",8,{"inputs":[{"name":"self"}],"output":{"name":"asciistring"}}],[10,"into_ascii_string","","Convert to `AsciiString`.",8,{"inputs":[{"name":"self"}],"output":{"generics":["asciistring"],"name":"result"}}]],"paths":[[4,"AsciiChar"],[3,"ToAsciiCharError"],[3,"AsciiStr"],[3,"AsAsciiStrError"],[3,"AsciiString"],[8,"ToAsciiChar"],[8,"AsAsciiStr"],[8,"AsMutAsciiStr"],[8,"IntoAsciiString"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for `BigEndian`.",null,null],[6,"LE","","A type alias for `LittleEndian`.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["combine"] = {"doc":"This crate contains parser combinators, roughly based on the Haskell library parsec.","items":[[3,"State","combine","The `State<I>` struct maintains the current position in the stream `I` using the `Positioner` trait to track the position.",null,null],[12,"input","","The input stream used when items are requested",0,null],[12,"positioner","","The positioner used to update the current position",0,null],[5,"any","","Parses any token.",null,{"inputs":[],"output":{"name":"any"}}],[5,"between","","Parses `open` followed by `parser` followed by `close`. Returns the value of `parser`.",null,{"inputs":[{"name":"l"},{"name":"r"},{"name":"p"}],"output":{"name":"between"}}],[5,"choice","","Takes a tuple, a slice or an array of parsers and tries to apply them each in order. Fails if all the parsers fails or if an applied parser consumes input before failing.",null,{"inputs":[{"name":"p"}],"output":{"name":"choice"}}],[5,"count","","Parses `parser` from zero up to `count` times.",null,{"inputs":[{"name":"usize"},{"name":"p"}],"output":{"name":"count"}}],[5,"count_min_max","","Parses `parser` from `min` to `max` times (including `min` and `max`).",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"p"}],"output":{"name":"countminmax"}}],[5,"env_parser","","Constructs a parser out of an environment and a function which needs the given environment to do the parsing. This is commonly useful to allow multiple parsers to share some environment while still allowing the parsers to be written in separate functions.",null,null],[5,"eof","","Succeeds only if the stream is at end of input, fails otherwise.",null,{"inputs":[],"output":{"name":"eof"}}],[5,"look_ahead","","`look_ahead(p)` acts as `p` but doesn't consume input on success.",null,{"inputs":[{"name":"p"}],"output":{"name":"lookahead"}}],[5,"many","","Parses `p` zero or more times returning a collection with the values from `p`.",null,{"inputs":[{"name":"p"}],"output":{"name":"many"}}],[5,"none_of","","Extract one token and succeeds if it is not part of `tokens`.",null,{"inputs":[{"name":"t"}],"output":{"name":"noneof"}}],[5,"not_followed_by","","Succeeds only if `parser` fails. Never consumes any input.",null,{"inputs":[{"name":"p"}],"output":{"name":"notfollowedby"}}],[5,"one_of","","Extract one token and succeeds if it is part of `tokens`.",null,{"inputs":[{"name":"t"}],"output":{"name":"oneof"}}],[5,"optional","","Parses `parser` and outputs `Some(value)` if it succeeds, `None` if it fails without consuming any input. Fails if `parser` fails after having consumed some input.",null,{"inputs":[{"name":"p"}],"output":{"name":"optional"}}],[5,"parser","","Wraps a function, turning it into a parser.",null,{"inputs":[{"name":"f"}],"output":{"name":"fnparser"}}],[5,"position","","Parser which just returns the current position in the stream.",null,{"inputs":[],"output":{"name":"position"}}],[5,"satisfy","","Parses a token and succeeds depending on the result of `predicate`.",null,{"inputs":[{"name":"p"}],"output":{"name":"satisfy"}}],[5,"satisfy_map","","Parses a token and passes it to `predicate`. If `predicate` returns `Some` the parser succeeds and returns the value inside the `Option`. If `predicate` returns `None` the parser fails without consuming any input.",null,{"inputs":[{"name":"p"}],"output":{"name":"satisfymap"}}],[5,"sep_by","","Parses `parser` zero or more time separated by `separator`, returning a collection with the values from `p`.",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sepby"}}],[5,"sep_end_by","","Parses `parser` zero or more times separated and ended by `separator`, returning a collection with the values from `p`.",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sependby"}}],[5,"skip_count","","Parses `parser` from zero up to `count` times skipping the output of `parser`.",null,{"inputs":[{"name":"usize"},{"name":"p"}],"output":{"name":"skipcount"}}],[5,"skip_count_min_max","","Parses `parser` from `min` to `max` times (including `min` and `max`) skipping the output of `parser`.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"p"}],"output":{"name":"skipcountminmax"}}],[5,"skip_many","","Parses `p` zero or more times ignoring the result.",null,{"inputs":[{"name":"p"}],"output":{"name":"skipmany"}}],[5,"token","","Parses a character and succeeds if the character is equal to `c`.",null,null],[5,"tokens","","Parses multiple tokens.",null,{"inputs":[{"name":"c"},{"name":"info"},{"name":"t"}],"output":{"name":"tokens"}}],[5,"try","","`try(p)` behaves as `p` except it acts as if the parser hadn't consumed any input if `p` fails after consuming input.",null,{"inputs":[{"name":"p"}],"output":{"name":"try"}}],[5,"unexpected","","Always fails with `message` as an unexpected error. Never consumes any input.",null,{"inputs":[{"name":"s"}],"output":{"name":"unexpected"}}],[5,"value","","Always returns the value `v` without consuming any input.",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"chainl1","","Parses `p` 1 or more times separated by `op`. The value returned is the one produced by the left associative application of the function returned by the parser `op`.",null,{"inputs":[{"name":"p"},{"name":"op"}],"output":{"name":"chainl1"}}],[5,"chainr1","","Parses `p` one or more times separated by `op`. The value returned is the one produced by the right associative application of the function returned by `op`.",null,{"inputs":[{"name":"p"},{"name":"op"}],"output":{"name":"chainr1"}}],[5,"many1","","Parses `p` one or more times returning a collection with the values from `p`.",null,{"inputs":[{"name":"p"}],"output":{"name":"many1"}}],[5,"sep_by1","","Parses `parser` one or more time separated by `separator`, returning a collection with the values from `p`.",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sepby1"}}],[5,"sep_end_by1","","Parses `parser` one or more times separated and ended by `separator`, returning a collection with the values from `p`.",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sependby1"}}],[5,"skip_many1","","Parses `p` one or more times ignoring the result.",null,{"inputs":[{"name":"p"}],"output":{"name":"skipmany1"}}],[0,"primitives","","Module containing the primitive types which is used to create and compose more advanced parsers.",null,null],[3,"PointerOffset","combine::primitives","Newtype around a pointer offset into a slice stream (`&[T]`/`&str`).",null,null],[12,"0","","",1,null],[3,"SliceStream","","Newtype for constructing a stream from a slice where the items in the slice are not copyable.",null,null],[12,"0","","",2,null],[3,"IteratorStream","","Wrapper around iterators which allows them to be treated as a stream. Returned by [`from_iter`].",null,null],[3,"ReadStream","","",null,null],[3,"Tracked","","Error wrapper which lets parsers track which parser in a sequence of sub-parsers has emitted the error. `Tracked::from` can be used to construct this and it should otherwise be ignored outside of combine.",null,null],[12,"error","","The error returned",3,null],[4,"Consumed","","Enum used to indicate if a parser consumed any items of the stream it was given as an input.",null,null],[13,"Consumed","","Constructor indicating that the parser has consumed elements",4,null],[13,"Empty","","Constructor indicating that the parser did not consume any elements",4,null],[4,"Info","","",null,null],[13,"Token","","",5,null],[13,"Range","","",5,null],[13,"Borrowed","","",5,null],[4,"EasyError","","Enum used to store information about an error that has occurred during parsing.",null,null],[13,"Unexpected","","Error indicating an unexpected token has been encountered in the stream",6,null],[13,"Expected","","Error indicating that the parser expected something else",6,null],[13,"Message","","Generic message",6,null],[4,"UnexpectedParse","","",null,null],[13,"Eoi","","",7,null],[13,"Unexpected","","",7,null],[4,"StringStreamError","","",null,null],[13,"UnexpectedParse","","",8,null],[13,"Eoi","","",8,null],[13,"CharacterBoundary","","",8,null],[4,"FastResult","","",null,null],[13,"ConsumedOk","","",9,null],[13,"EmptyOk","","",9,null],[13,"ConsumedErr","","",9,null],[13,"EmptyErr","","",9,null],[5,"uncons","","",null,{"inputs":[{"name":"i"}],"output":{"name":"parseresult"}}],[5,"uncons_while","","Removes items from the input while `predicate` returns `true`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"consumedresult"}}],[6,"ParseResult","","A type alias over the specific `Result` type used by parsers to indicate wether they were successful or not. `O` is the type that is output on success. `I` is the specific stream type used in the parser.",null,null],[6,"ConsumedResult","","A `Result` type which has the consumed status flattened into the result. Conversions to and from `std::result::Result` can be done using `result.into()` or `From::from(result)`",null,null],[8,"StreamError","","`StreamError` represents a single error returned from a `Stream` or a `Parser`. Usually this is composed into a `ParseError`",null,null],[10,"unexpected_token","","",10,{"inputs":[{"name":"item"}],"output":{"name":"self"}}],[10,"unexpected_range","","",10,{"inputs":[{"name":"range"}],"output":{"name":"self"}}],[10,"unexpected_message","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"unexpected","","",10,{"inputs":[{"name":"info"}],"output":{"name":"self"}}],[11,"unexpected_static_message","","",10,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[10,"expected_token","","",10,{"inputs":[{"name":"item"}],"output":{"name":"self"}}],[10,"expected_range","","",10,{"inputs":[{"name":"range"}],"output":{"name":"self"}}],[10,"expected_message","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"expected","","",10,{"inputs":[{"name":"info"}],"output":{"name":"self"}}],[11,"expected_static_message","","",10,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[10,"message_token","","",10,{"inputs":[{"name":"item"}],"output":{"name":"self"}}],[10,"message_range","","",10,{"inputs":[{"name":"range"}],"output":{"name":"self"}}],[10,"message_message","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"message_static_message","","",10,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"message","","",10,{"inputs":[{"name":"info"}],"output":{"name":"self"}}],[11,"other","","",10,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"end_of_input","","",10,{"inputs":[],"output":{"name":"self"}}],[10,"into_other","","",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ParseError","","Trait which defines a gluon parse error.",null,null],[16,"StreamError","","",11,null],[10,"empty","","Constructs an empty error.",11,{"inputs":[{"name":"position"}],"output":{"name":"self"}}],[10,"from_error","","Creates a `ParseError` from a single `Self::StreamError`",11,null],[10,"set_position","","Sets the position of this `ParseError`",11,{"inputs":[{"name":"self"},{"name":"position"}],"output":null}],[11,"merge","","Merges two errors. If they exist at the same position the errors of `other` are added to `self` (using the semantics of `add`). If they are not at the same position the error furthest ahead are returned, ignoring the other `ParseError`.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"add","","Adds a `StreamError` to `self`.",11,null],[11,"add_expected","","",11,{"inputs":[{"name":"self"},{"name":"info"}],"output":null}],[11,"add_unexpected","","",11,{"inputs":[{"name":"self"},{"name":"info"}],"output":null}],[11,"add_message","","",11,{"inputs":[{"name":"self"},{"name":"info"}],"output":null}],[10,"set_expected","","Sets `info` as the only `Expected` error of `self`",11,null],[10,"into_other","","Does a best-effort conversion of `self` into another `ParseError`",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Positioned","","",null,null],[10,"position","","Returns the current position of the stream.",12,null],[8,"StreamOnce","","`StreamOnce` represents a sequence of items that can be extracted one by one.",null,null],[16,"Item","","The type of items which is yielded from this stream.",13,null],[16,"Range","","The type of a range of items yielded from this stream. Types which do not a have a way of yielding ranges of items should just use the `Self::Item` for this type.",13,null],[16,"Position","","Type which represents the position in a stream. `Ord` is required to allow parsers to determine which of two positions are further ahead.",13,null],[16,"Error","","",13,null],[10,"uncons","","Takes a stream and removes its first item, yielding the item and the rest of the elements. Returns `Err` if no element could be retrieved.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Stream","","A stream of tokens which can be duplicated",null,null],[8,"RangeStreamOnce","","A `RangeStream` is an extension of `StreamOnce` which allows for zero copy parsing.",null,null],[10,"uncons_range","","Takes `size` elements from the stream. Fails if the length of the stream is less than `size`.",14,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"uncons_while","","Takes items from stream, testing each one with `predicate`. returns the range of items which passed `predicate`.",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"distance","","Returns the distance between `self` and `end`. The returned `usize` must be so that",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[8,"RangeStream","","A `RangeStream` is an extension of `Stream` which allows for zero copy parsing.",null,null],[8,"FullRangeStream","","A `RangeStream` which is capable of providing it's entire range.",null,null],[10,"range","","Returns the entire range of `self`",15,null],[8,"Range","","",null,null],[10,"len","","Returns the remaining length of `self`. The returned length need not be the same as the number of items left in the stream.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the range does not contain any elements (`Range::len() == 0`)",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Parser","","By implementing the `Parser` trait a type says that it can be used to parse an input stream into the type `Output`.",null,null],[16,"Input","","The type which is taken as input for the parser. The type must implement the `Stream` trait which allows the parser to read items from the type.",17,null],[16,"Output","","The type which is returned if the parser is successful.",17,null],[11,"easy_parse","","Entry point of the parser. Takes some input and tries to parse it.",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["streamerrors"],"name":"result"}}],[11,"parse","","Entry point of the parser. Takes some input and tries to parse it.",17,null],[11,"parse_stream","","Parses using the stream `input` by calling [`Stream::uncons`] one or more times.",17,null],[11,"parse_stream_consumed","","Parses using the stream `input` by calling [`Stream::uncons`] one or more times.",17,null],[11,"parse_lazy","","Parses using the stream `input` by calling [`Stream::uncons`] one or more times.",17,null],[11,"add_error","","Adds the first error that would normally be returned by this parser if it failed with an `EmptyErr` result.",17,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"by_ref","","Borrows a parser instead of consuming it.",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"with","","Discards the value of the `self` parser and returns the value of `p`. Fails if any of the parsers fails.",17,{"inputs":[{"name":"self"},{"name":"p2"}],"output":{"name":"with"}}],[11,"skip","","Discards the value of the `p` parser and returns the value of `self`. Fails if any of the parsers fails.",17,{"inputs":[{"name":"self"},{"name":"p2"}],"output":{"name":"skip"}}],[11,"and","","Parses with `self` followed by `p`. Succeeds if both parsers succeed, otherwise fails. Returns a tuple with both values on success.",17,null],[11,"or","","Returns a parser which attempts to parse using `self`. If `self` fails without consuming any input it tries to consume the same input using `p`.",17,{"inputs":[{"name":"self"},{"name":"p2"}],"output":{"name":"or"}}],[11,"then","","Parses using `self` and then passes the value to `f` which returns a parser used to parse the rest of the input.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"map","","Uses `f` to map over the parsed value.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"flat_map","","Uses `f` to map over the output of `self`. If `f` returns an error the parser fails.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"message","","Parses with `self` and if it fails, adds the message `msg` to the error.",17,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"message"}}],[11,"expected","","Parses with `self` and if it fails without consuming any input any expected errors are replaced by `msg`. `msg` is then used in error messages as \"Expected `msg`\".",17,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"expected"}}],[11,"and_then","","Parses with `self` and applies `f` on the result if `self` parses successfully. `f` may optionally fail with an error which is automatically converted to a `ParseError`.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"iter","","Creates an iterator from a parser and a state. Can be used as an alternative to [`many`] when collecting directly into a `FromIterator` type is not desirable.",17,null],[11,"boxed","","Turns the parser into a trait object by putting it in a `Box`. Can be used to easily return parsers from functions without naming the type.",17,{"inputs":[{"name":"self"}],"output":{"generics":["parser"],"name":"box"}}],[11,"left","","Wraps the parser into the `Either` enum which allows combinators such as `then` to return multiple different parser types (merging them to one)",17,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right","","Wraps the parser into the `Either` enum which allows combinators such as `then` to return multiple different parser types (merging them to one)",17,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"pointeroffset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"pointeroffset"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"pointeroffset"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"pointeroffset"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"pointeroffset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"pointeroffset"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"pointeroffset"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"pointeroffset"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"pointeroffset"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"pointeroffset"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"translate_position","","Converts the pointer-based position into an indexed position.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"usize"}}],[11,"from","","",5,{"inputs":[{"name":"char"}],"output":{"generics":["char"],"name":"info"}}],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"info"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"generics":["u8"],"name":"info"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"consumed"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"consumed"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"consumed"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_empty","","Returns true if `self` is empty.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Extracts the contained value.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_consumed","","Converts `self` into the `Consumed` state.",4,{"inputs":[{"name":"self"}],"output":{"name":"consumed"}}],[11,"into_empty","","Converts `self` into the `Empty` state.",4,{"inputs":[{"name":"self"}],"output":{"name":"consumed"}}],[11,"map","","Maps over the contained value without changing the consumed state.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"consumed"}}],[11,"merge","","",4,{"inputs":[{"name":"self"},{"name":"consumed"}],"output":{"name":"consumed"}}],[11,"combine","","Combines the `Consumed` flags from `self` and the result of `f`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"parseresult"}}],[11,"combine_consumed","","",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"consumedresult"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unexpectedparse"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"unexpectedparse"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unexpected_token","","",7,{"inputs":[{"name":"item"}],"output":{"name":"self"}}],[11,"unexpected_range","","",7,{"inputs":[{"name":"range"}],"output":{"name":"self"}}],[11,"unexpected_message","","",7,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"expected_token","","",7,{"inputs":[{"name":"item"}],"output":{"name":"self"}}],[11,"expected_range","","",7,{"inputs":[{"name":"range"}],"output":{"name":"self"}}],[11,"expected_message","","",7,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"message_message","","",7,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"message_token","","",7,{"inputs":[{"name":"item"}],"output":{"name":"self"}}],[11,"message_range","","",7,{"inputs":[{"name":"range"}],"output":{"name":"self"}}],[11,"end_of_input","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"into_other","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"empty","","",7,{"inputs":[{"name":"position"}],"output":{"name":"self"}}],[11,"from_error","","",7,null],[11,"set_position","","",7,{"inputs":[{"name":"self"},{"name":"position"}],"output":null}],[11,"add","","",7,null],[11,"set_expected","","",7,null],[11,"into_other","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"stringstreamerror"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"stringstreamerror"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unexpected_token","","",8,{"inputs":[{"name":"item"}],"output":{"name":"self"}}],[11,"unexpected_range","","",8,{"inputs":[{"name":"range"}],"output":{"name":"self"}}],[11,"unexpected_message","","",8,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"expected_token","","",8,{"inputs":[{"name":"item"}],"output":{"name":"self"}}],[11,"expected_range","","",8,{"inputs":[{"name":"range"}],"output":{"name":"self"}}],[11,"expected_message","","",8,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"message_message","","",8,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"message_token","","",8,{"inputs":[{"name":"item"}],"output":{"name":"self"}}],[11,"message_range","","",8,{"inputs":[{"name":"range"}],"output":{"name":"self"}}],[11,"message_static_message","","",8,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"end_of_input","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"into_other","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"empty","","",8,{"inputs":[{"name":"position"}],"output":{"name":"self"}}],[11,"from_error","","",8,null],[11,"set_position","","",8,{"inputs":[{"name":"self"},{"name":"position"}],"output":null}],[11,"add","","",8,null],[11,"set_expected","","",8,null],[11,"into_other","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"slicestream"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"slicestream"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"slicestream"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"slicestream"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"slicestream"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"slicestream"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"slicestream"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"slicestream"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"slicestream"}}],[11,"position","","",2,null],[11,"uncons","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"uncons_range","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"uncons_while","","",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"distance","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[11,"range","","",2,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"iteratorstream"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Converts an `Iterator` into a stream.",18,{"inputs":[{"name":"i"}],"output":{"name":"iteratorstream"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"uncons","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"uncons","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"new","","Creates a `StreamOnce` instance from a value implementing `std::io::Read`.",19,{"inputs":[{"name":"r"}],"output":{"name":"readstream"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"tracked"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"fastresult"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"fastresult"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"fastresult"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"fastresult"}}],[11,"and_then","","",9,null],[11,"map","","",20,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"consumedresult"}}],[11,"into","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["consumed","consumed"],"name":"result"}}],[11,"into","","",20,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"from","","",20,{"inputs":[{"name":"parseresult"}],"output":{"name":"consumedresult"}}],[0,"combinator","combine","Module containing all specific parsers.",null,null],[3,"Any","combine::combinator","",null,null],[3,"Satisfy","","",null,null],[3,"SatisfyMap","","",null,null],[3,"Token","","",null,null],[3,"Tokens","","",null,null],[3,"Position","","",null,null],[3,"OneOf","","",null,null],[3,"NoneOf","","",null,null],[3,"Count","","",null,null],[3,"Choice","","",null,null],[3,"SkipCount","","",null,null],[12,"count","","",21,null],[12,"parser","","",21,null],[3,"CountMinMax","","",null,null],[3,"SkipCountMinMax","","",null,null],[12,"min","","",22,null],[12,"max","","",22,null],[12,"parser","","",22,null],[3,"Unexpected","","",null,null],[3,"Value","","",null,null],[3,"NotFollowedBy","","",null,null],[12,"parser","","",23,null],[3,"Eof","","",null,null],[3,"Iter","","",null,null],[3,"Many","","",null,null],[3,"Many1","","",null,null],[3,"SkipMany","","",null,null],[3,"SkipMany1","","",null,null],[3,"SepBy","","",null,null],[3,"SepBy1","","",null,null],[3,"SepEndBy","","",null,null],[3,"SepEndBy1","","",null,null],[3,"FnParser","","",null,null],[3,"Optional","","",null,null],[3,"Between","","",null,null],[3,"Chainl1","","",null,null],[3,"Chainr1","","",null,null],[3,"Try","","",null,null],[3,"LookAhead","","",null,null],[3,"With","","",null,null],[3,"Skip","","",null,null],[3,"Message","","",null,null],[3,"Or","","",null,null],[3,"Map","","",null,null],[3,"FlatMap","","",null,null],[3,"Then","","",null,null],[3,"Expected","","",null,null],[3,"AndThen","","",null,null],[3,"EnvParser","","",null,null],[3,"Recognize","","",null,null],[5,"any","","Parses any token.",null,{"inputs":[],"output":{"name":"any"}}],[5,"satisfy","","Parses a token and succeeds depending on the result of `predicate`.",null,{"inputs":[{"name":"p"}],"output":{"name":"satisfy"}}],[5,"satisfy_map","","Parses a token and passes it to `predicate`. If `predicate` returns `Some` the parser succeeds and returns the value inside the `Option`. If `predicate` returns `None` the parser fails without consuming any input.",null,{"inputs":[{"name":"p"}],"output":{"name":"satisfymap"}}],[5,"token","","Parses a character and succeeds if the character is equal to `c`.",null,null],[5,"tokens","","Parses multiple tokens.",null,{"inputs":[{"name":"c"},{"name":"info"},{"name":"t"}],"output":{"name":"tokens"}}],[5,"position","","Parser which just returns the current position in the stream.",null,{"inputs":[],"output":{"name":"position"}}],[5,"one_of","","Extract one token and succeeds if it is part of `tokens`.",null,{"inputs":[{"name":"t"}],"output":{"name":"oneof"}}],[5,"none_of","","Extract one token and succeeds if it is not part of `tokens`.",null,{"inputs":[{"name":"t"}],"output":{"name":"noneof"}}],[5,"count","","Parses `parser` from zero up to `count` times.",null,{"inputs":[{"name":"usize"},{"name":"p"}],"output":{"name":"count"}}],[5,"skip_count","","Parses `parser` from zero up to `count` times skipping the output of `parser`.",null,{"inputs":[{"name":"usize"},{"name":"p"}],"output":{"name":"skipcount"}}],[5,"count_min_max","","Parses `parser` from `min` to `max` times (including `min` and `max`).",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"p"}],"output":{"name":"countminmax"}}],[5,"skip_count_min_max","","Parses `parser` from `min` to `max` times (including `min` and `max`) skipping the output of `parser`.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"p"}],"output":{"name":"skipcountminmax"}}],[5,"choice","","Takes a tuple, a slice or an array of parsers and tries to apply them each in order. Fails if all the parsers fails or if an applied parser consumes input before failing.",null,{"inputs":[{"name":"p"}],"output":{"name":"choice"}}],[5,"unexpected","","Always fails with `message` as an unexpected error. Never consumes any input.",null,{"inputs":[{"name":"s"}],"output":{"name":"unexpected"}}],[5,"value","","Always returns the value `v` without consuming any input.",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"not_followed_by","","Succeeds only if `parser` fails. Never consumes any input.",null,{"inputs":[{"name":"p"}],"output":{"name":"notfollowedby"}}],[5,"eof","","Succeeds only if the stream is at end of input, fails otherwise.",null,{"inputs":[],"output":{"name":"eof"}}],[5,"many","","Parses `p` zero or more times returning a collection with the values from `p`.",null,{"inputs":[{"name":"p"}],"output":{"name":"many"}}],[5,"skip_many","","Parses `p` zero or more times ignoring the result.",null,{"inputs":[{"name":"p"}],"output":{"name":"skipmany"}}],[5,"skip_many1","","Parses `p` one or more times ignoring the result.",null,{"inputs":[{"name":"p"}],"output":{"name":"skipmany1"}}],[5,"many1","","Parses `p` one or more times returning a collection with the values from `p`.",null,{"inputs":[{"name":"p"}],"output":{"name":"many1"}}],[5,"sep_by","","Parses `parser` zero or more time separated by `separator`, returning a collection with the values from `p`.",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sepby"}}],[5,"sep_by1","","Parses `parser` one or more time separated by `separator`, returning a collection with the values from `p`.",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sepby1"}}],[5,"sep_end_by","","Parses `parser` zero or more times separated and ended by `separator`, returning a collection with the values from `p`.",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sependby"}}],[5,"sep_end_by1","","Parses `parser` one or more times separated and ended by `separator`, returning a collection with the values from `p`.",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sependby1"}}],[5,"parser","","Wraps a function, turning it into a parser.",null,{"inputs":[{"name":"f"}],"output":{"name":"fnparser"}}],[5,"optional","","Parses `parser` and outputs `Some(value)` if it succeeds, `None` if it fails without consuming any input. Fails if `parser` fails after having consumed some input.",null,{"inputs":[{"name":"p"}],"output":{"name":"optional"}}],[5,"between","","Parses `open` followed by `parser` followed by `close`. Returns the value of `parser`.",null,{"inputs":[{"name":"l"},{"name":"r"},{"name":"p"}],"output":{"name":"between"}}],[5,"chainl1","","Parses `p` 1 or more times separated by `op`. The value returned is the one produced by the left associative application of the function returned by the parser `op`.",null,{"inputs":[{"name":"p"},{"name":"op"}],"output":{"name":"chainl1"}}],[5,"chainr1","","Parses `p` one or more times separated by `op`. The value returned is the one produced by the right associative application of the function returned by `op`.",null,{"inputs":[{"name":"p"},{"name":"op"}],"output":{"name":"chainr1"}}],[5,"try","","`try(p)` behaves as `p` except it acts as if the parser hadn't consumed any input if `p` fails after consuming input.",null,{"inputs":[{"name":"p"}],"output":{"name":"try"}}],[5,"look_ahead","","`look_ahead(p)` acts as `p` but doesn't consume input on success.",null,{"inputs":[{"name":"p"}],"output":{"name":"lookahead"}}],[5,"with","","Equivalent to [`p1.with(p2)`].",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"with"}}],[5,"skip","","",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"skip"}}],[5,"message","","Equivalent to [`p1.message(msg)`].",null,{"inputs":[{"name":"p"},{"name":"info"}],"output":{"name":"message"}}],[5,"or","","Equivalent to [`p1.or(p2)`].",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"or"}}],[5,"map","","Equivalent to [`p.map(f)`].",null,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"map"}}],[5,"flat_map","","Equivalent to [`p.flat_map(f)`].",null,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"flatmap"}}],[5,"then","","Equivalent to [`p.then(f)`].",null,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"then"}}],[5,"expected","","Equivalent to [`p.expected(info)`].",null,{"inputs":[{"name":"p"},{"name":"info"}],"output":{"name":"expected"}}],[5,"and_then","","Equivalent to [`p.and_then(f)`].",null,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"andthen"}}],[5,"env_parser","","Constructs a parser out of an environment and a function which needs the given environment to do the parsing. This is commonly useful to allow multiple parsers to share some environment while still allowing the parsers to be written in separate functions.",null,null],[5,"recognize","","Constructs a parser which returns the tokens parsed by `parser` accumulated in `F: FromIterator<P::Input::Item>` instead of `P::Output`.",null,{"inputs":[{"name":"p"}],"output":{"name":"recognize"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"skipcount"}}],[11,"parse_lazy","","",21,null],[11,"add_error","","",21,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"skipcountminmax"}}],[11,"parse_lazy","","",22,null],[11,"add_error","","",22,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"notfollowedby"}}],[11,"parse_lazy","","",23,null],[11,"add_error","","",23,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[8,"ChoiceParser","","`ChoiceParser` represents a parser which may parse one of several different choices depending on the input.",null,null],[16,"Input","","",24,null],[16,"Output","","",24,null],[10,"parse_choice","","",24,null],[10,"add_error_choice","","",24,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"parse_lazy","","",25,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"satisfy"}}],[11,"parse_lazy","","",26,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"satisfymap"}}],[11,"parse_lazy","","",27,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"parse_lazy","","",28,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"add_error","","",28,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"parse_lazy","","",29,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"add_error","","",29,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"parse_lazy","","",30,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"oneof"}}],[11,"parse_lazy","","",31,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"add_error","","",31,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"noneof"}}],[11,"parse_lazy","","",32,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"count"}}],[11,"parse_lazy","","",33,null],[11,"add_error","","",33,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"choice"}}],[11,"parse_lazy","","",34,null],[11,"add_error","","",34,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"countminmax"}}],[11,"parse_lazy","","",35,null],[11,"add_error","","",35,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"parse_lazy","","",36,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"add_error","","",36,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"parse_lazy","","",37,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"eof"}}],[11,"parse_lazy","","",38,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"add_error","","",38,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"new","","",39,null],[11,"into_result","","Converts the iterator to a `ParseResult`, returning `Ok` if the parsing so far has be done without any errors which consumed data.",39,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"parseresult"}}],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"many"}}],[11,"parse_stream_consumed","","",40,null],[11,"add_error","","",40,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"many1"}}],[11,"parse_lazy","","",41,null],[11,"add_error","","",41,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"skipmany"}}],[11,"parse_stream","","",42,null],[11,"parse_stream_consumed","","",42,null],[11,"parse_lazy","","",42,null],[11,"add_error","","",42,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"skipmany1"}}],[11,"parse_stream","","",43,null],[11,"parse_stream_consumed","","",43,null],[11,"parse_lazy","","",43,null],[11,"add_error","","",43,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"sepby"}}],[11,"parse_lazy","","",44,null],[11,"add_error","","",44,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"sepby1"}}],[11,"parse_lazy","","",45,null],[11,"add_error","","",45,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"sependby"}}],[11,"parse_lazy","","",46,null],[11,"add_error","","",46,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"sependby1"}}],[11,"parse_lazy","","",47,null],[11,"add_error","","",47,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"fnparser"}}],[11,"parse_stream","","",48,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"parseresult"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"optional"}}],[11,"parse_lazy","","",49,null],[11,"add_error","","",49,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"between"}}],[11,"parse_stream","","",50,null],[11,"parse_stream_consumed","","",50,null],[11,"parse_lazy","","",50,null],[11,"add_error","","",50,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"chainl1"}}],[11,"parse_lazy","","",51,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"add_error","","",51,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"chainr1"}}],[11,"parse_lazy","","",52,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"add_error","","",52,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"try"}}],[11,"parse_stream","","",53,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"parseresult"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"lookahead"}}],[11,"parse_lazy","","",54,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"add_error","","",54,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"with"}}],[11,"parse_lazy","","",55,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"add_error","","",55,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"skip"}}],[11,"parse_lazy","","",56,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"add_error","","",56,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"parse_lazy","","",57,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"add_error","","",57,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"or"}}],[11,"parse_lazy","","",58,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"add_error","","",58,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"map"}}],[11,"parse_lazy","","",59,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"add_error","","",59,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"flatmap"}}],[11,"parse_lazy","","",60,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"add_error","","",60,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"then"}}],[11,"parse_lazy","","",61,null],[11,"add_error","","",61,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"expected"}}],[11,"parse_lazy","","",62,null],[11,"add_error","","",62,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"andthen"}}],[11,"parse_lazy","","",63,null],[11,"add_error","","",63,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"envparser"}}],[11,"parse_lazy","","",64,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"consumedresult"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"recognize"}}],[11,"parse_lazy","","",65,null],[11,"add_error","","",65,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[0,"range","combine","Module containing zero-copy parsers.",null,null],[3,"Range","combine::range","",null,null],[3,"Recognize","","",null,null],[12,"parser","","",66,null],[3,"RecognizeWithValue","","",null,null],[3,"Take","","",null,null],[3,"TakeWhile","","",null,null],[3,"TakeWhile1","","",null,null],[3,"TakeUntilRange","","",null,null],[5,"recognize","","Zero-copy parser which returns consumed input range.",null,{"inputs":[{"name":"p"}],"output":{"name":"recognize"}}],[5,"recognize_with_value","","Zero-copy parser which returns a pair: (consumed input range, parsed value).",null,{"inputs":[{"name":"p"}],"output":{"name":"recognizewithvalue"}}],[5,"range","","Zero-copy parser which reads a range of length `i.len()` and succeds if `i` is equal to that range.",null,null],[5,"take","","Zero-copy parser which reads a range of length `n`.",null,{"inputs":[{"name":"usize"}],"output":{"name":"take"}}],[5,"take_while","","Zero-copy parser which reads a range of 0 or more tokens which satisfy `f`.",null,{"inputs":[{"name":"f"}],"output":{"name":"takewhile"}}],[5,"take_while1","","Zero-copy parser which reads a range of 1 or more tokens which satisfy `f`.",null,{"inputs":[{"name":"f"}],"output":{"name":"takewhile1"}}],[5,"take_until_range","","Zero-copy parser which reads a range of 0 or more tokens until `r` is found.",null,null],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"recognize"}}],[11,"parse_lazy","","",66,null],[11,"add_error","","",66,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"parse_lazy","","",67,null],[11,"add_error","","",67,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"recognizewithvalue"}}],[11,"parse_lazy","","",68,null],[11,"add_error","","",68,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"parse_lazy","","",69,null],[11,"parse_lazy","","",70,null],[11,"parse_lazy","","",71,null],[11,"parse_lazy","","",72,null],[0,"byte","combine","Module containing parsers specialized on byte streams.",null,null],[3,"Digit","combine::byte","",null,null],[3,"Space","","",null,null],[3,"Spaces","","",null,null],[3,"Newline","","",null,null],[3,"CrLf","","",null,null],[3,"Tab","","",null,null],[3,"Upper","","",null,null],[3,"Lower","","",null,null],[3,"AlphaNum","","",null,null],[3,"Letter","","",null,null],[3,"OctDigit","","",null,null],[3,"HexDigit","","",null,null],[3,"Bytes","","",null,null],[3,"BytesCmp","","",null,null],[5,"byte","","Parses a byteacter and succeeds if the byteacter is equal to `c`.",null,{"inputs":[{"name":"u8"}],"output":{"name":"token"}}],[5,"digit","","Parses a base-10 digit (0–9).",null,{"inputs":[],"output":{"name":"digit"}}],[5,"space","","Parses a `b' '`, `b'\\t'`, `b'\\n'` or `'b\\'r'`.",null,{"inputs":[],"output":{"name":"space"}}],[5,"spaces","","Skips over [`space`] zero or more times",null,{"inputs":[],"output":{"name":"spaces"}}],[5,"newline","","Parses a newline byteacter (`b'\\n'`).",null,{"inputs":[],"output":{"name":"newline"}}],[5,"crlf","","Parses carriage return and newline (`&b\"\\r\\n\"`), returning the newline byteacter.",null,{"inputs":[],"output":{"name":"crlf"}}],[5,"tab","","Parses a tab byteacter (`b'\\t'`).",null,{"inputs":[],"output":{"name":"tab"}}],[5,"upper","","Parses an uppercase ASCII letter (A–Z).",null,{"inputs":[],"output":{"name":"upper"}}],[5,"lower","","Parses an lowercase ASCII letter (a–z).",null,{"inputs":[],"output":{"name":"lower"}}],[5,"alpha_num","","Parses either an ASCII alphabet letter or digit (a–z, A–Z, 0–9).",null,{"inputs":[],"output":{"name":"alphanum"}}],[5,"letter","","Parses an ASCII alphabet letter (a–z, A–Z).",null,{"inputs":[],"output":{"name":"letter"}}],[5,"oct_digit","","Parses an octal digit.",null,{"inputs":[],"output":{"name":"octdigit"}}],[5,"hex_digit","","Parses an ASCII hexdecimal digit (accepts both uppercase and lowercase).",null,{"inputs":[],"output":{"name":"hexdigit"}}],[5,"bytes","","Parses the bytes `s`.",null,null],[5,"bytes_cmp","","Parses the bytes `s` using `cmp` to compare each token.",null,null],[0,"num","","Parsers for decoding numbers in big-endian or little-endian order.",null,null],[3,"U16","combine::byte::num","",null,null],[3,"U32","","",null,null],[3,"U64","","",null,null],[3,"I16","","",null,null],[3,"I32","","",null,null],[3,"I64","","",null,null],[3,"F32","","",null,null],[3,"F64","","",null,null],[5,"u16","","Reads a u16 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"name":"u16"}}],[5,"be_u16","","Reads a u16 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"generics":["be"],"name":"u16"}}],[5,"le_u16","","Reads a u16 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"generics":["le"],"name":"u16"}}],[5,"u32","","Reads a u32 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"name":"u32"}}],[5,"be_u32","","Reads a u32 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"generics":["be"],"name":"u32"}}],[5,"le_u32","","Reads a u32 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"generics":["le"],"name":"u32"}}],[5,"u64","","Reads a u64 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"name":"u64"}}],[5,"be_u64","","Reads a u64 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"generics":["be"],"name":"u64"}}],[5,"le_u64","","Reads a u64 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"generics":["le"],"name":"u64"}}],[5,"i16","","Reads a i16 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"name":"i16"}}],[5,"be_i16","","Reads a i16 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"generics":["be"],"name":"i16"}}],[5,"le_i16","","Reads a i16 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"generics":["le"],"name":"i16"}}],[5,"i32","","Reads a i32 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"name":"i32"}}],[5,"be_i32","","Reads a i32 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"generics":["be"],"name":"i32"}}],[5,"le_i32","","Reads a i32 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"generics":["le"],"name":"i32"}}],[5,"i64","","Reads a i64 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"name":"i64"}}],[5,"be_i64","","Reads a i64 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"generics":["be"],"name":"i64"}}],[5,"le_i64","","Reads a i64 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"generics":["le"],"name":"i64"}}],[5,"f32","","Reads a i32 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"name":"f32"}}],[5,"be_f32","","Reads a i32 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"generics":["be"],"name":"f32"}}],[5,"le_f32","","Reads a i32 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"generics":["le"],"name":"f32"}}],[5,"f64","","Reads a i64 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"name":"f64"}}],[5,"be_f64","","Reads a i64 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"generics":["be"],"name":"f64"}}],[5,"le_f64","","Reads a i64 out of the byte stream with the specified endianess",null,{"inputs":[],"output":{"generics":["le"],"name":"f64"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"parse_lazy","","",73,null],[11,"add_error","","",73,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"parse_lazy","","",74,null],[11,"add_error","","",74,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"parse_lazy","","",75,null],[11,"add_error","","",75,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"parse_lazy","","",76,null],[11,"add_error","","",76,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"parse_lazy","","",77,null],[11,"add_error","","",77,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"parse_lazy","","",78,null],[11,"add_error","","",78,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"parse_lazy","","",79,null],[11,"add_error","","",79,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"parse_lazy","","",80,null],[11,"add_error","","",80,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","combine::byte","",81,{"inputs":[{"name":"self"}],"output":{"name":"digit"}}],[11,"parse_lazy","","",81,null],[11,"add_error","","",81,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"space"}}],[11,"parse_lazy","","",82,null],[11,"add_error","","",82,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"spaces"}}],[11,"parse_lazy","","",83,null],[11,"add_error","","",83,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"parse_lazy","","",84,null],[11,"add_error","","",84,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"crlf"}}],[11,"parse_lazy","","",85,null],[11,"add_error","","",85,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"tab"}}],[11,"parse_lazy","","",86,null],[11,"add_error","","",86,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"upper"}}],[11,"parse_lazy","","",87,null],[11,"add_error","","",87,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"lower"}}],[11,"parse_lazy","","",88,null],[11,"add_error","","",88,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"alphanum"}}],[11,"parse_lazy","","",89,null],[11,"add_error","","",89,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"letter"}}],[11,"parse_lazy","","",90,null],[11,"add_error","","",90,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"octdigit"}}],[11,"parse_lazy","","",91,null],[11,"add_error","","",91,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"hexdigit"}}],[11,"parse_lazy","","",92,null],[11,"add_error","","",92,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"parse_lazy","","",93,null],[11,"add_error","","",93,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"bytescmp"}}],[11,"parse_lazy","","",94,null],[11,"add_error","","",94,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[0,"char","combine","Module containing parsers specialized on character streams.",null,null],[3,"Digit","combine::char","",null,null],[3,"Space","","",null,null],[3,"Spaces","","",null,null],[3,"Newline","","",null,null],[3,"CrLf","","",null,null],[3,"Tab","","",null,null],[3,"Upper","","",null,null],[3,"Lower","","",null,null],[3,"AlphaNum","","",null,null],[3,"Letter","","",null,null],[3,"OctDigit","","",null,null],[3,"HexDigit","","",null,null],[3,"Str","","",null,null],[3,"StrCmp","","",null,null],[5,"char","","Parses a character and succeeds if the character is equal to `c`.",null,{"inputs":[{"name":"char"}],"output":{"name":"token"}}],[5,"digit","","Parses a base-10 digit.",null,{"inputs":[],"output":{"name":"digit"}}],[5,"space","","Parse a single whitespace according to [`std::char::is_whitespace`].",null,{"inputs":[],"output":{"name":"space"}}],[5,"spaces","","Skips over zero or more spaces according to [`std::char::is_whitespace`].",null,{"inputs":[],"output":{"name":"spaces"}}],[5,"newline","","Parses a newline character.",null,{"inputs":[],"output":{"name":"newline"}}],[5,"crlf","","Parses carriage return and newline, returning the newline character.",null,{"inputs":[],"output":{"name":"crlf"}}],[5,"tab","","Parses a tab character.",null,{"inputs":[],"output":{"name":"tab"}}],[5,"upper","","Parses an uppercase letter according to [`std::char::is_uppercase`].",null,{"inputs":[],"output":{"name":"upper"}}],[5,"lower","","Parses an lowercase letter according to [`std::char::is_lowercase`].",null,{"inputs":[],"output":{"name":"lower"}}],[5,"alpha_num","","Parses either an alphabet letter or digit according to [`std::char::is_alphanumeric`].",null,{"inputs":[],"output":{"name":"alphanum"}}],[5,"letter","","Parses an alphabet letter according to [`std::char::is_alphabetic`].",null,{"inputs":[],"output":{"name":"letter"}}],[5,"oct_digit","","Parses an octal digit.",null,{"inputs":[],"output":{"name":"octdigit"}}],[5,"hex_digit","","Parses a hexdecimal digit with uppercase and lowercase.",null,{"inputs":[],"output":{"name":"hexdigit"}}],[5,"string","","Parses the string `s`.",null,{"inputs":[{"name":"str"}],"output":{"name":"str"}}],[5,"string_cmp","","Parses the string `s`, using `cmp` to compare each character.",null,{"inputs":[{"name":"str"},{"name":"c"}],"output":{"name":"strcmp"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"digit"}}],[11,"parse_lazy","","",95,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["char"],"name":"consumedresult"}}],[11,"add_error","","",95,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"space"}}],[11,"parse_lazy","","",96,null],[11,"add_error","","",96,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"spaces"}}],[11,"parse_lazy","","",97,null],[11,"add_error","","",97,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"parse_lazy","","",98,null],[11,"add_error","","",98,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"crlf"}}],[11,"parse_lazy","","",99,null],[11,"add_error","","",99,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"tab"}}],[11,"parse_lazy","","",100,null],[11,"add_error","","",100,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"upper"}}],[11,"parse_lazy","","",101,null],[11,"add_error","","",101,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"lower"}}],[11,"parse_lazy","","",102,null],[11,"add_error","","",102,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"alphanum"}}],[11,"parse_lazy","","",103,null],[11,"add_error","","",103,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"letter"}}],[11,"parse_lazy","","",104,null],[11,"add_error","","",104,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"octdigit"}}],[11,"parse_lazy","","",105,null],[11,"add_error","","",105,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"hexdigit"}}],[11,"parse_lazy","","",106,null],[11,"add_error","","",106,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"parse_lazy","","",107,null],[11,"add_error","","",107,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"strcmp"}}],[11,"parse_lazy","","",108,null],[11,"add_error","","",108,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[0,"state","combine","Module containing stateful stream wrappers.",null,null],[3,"State","combine::state","The `State<I>` struct maintains the current position in the stream `I` using the `Positioner` trait to track the position.",null,null],[12,"input","","The input stream used when items are requested",0,null],[12,"positioner","","The positioner used to update the current position",0,null],[3,"IndexPositioner","","The `IndexPositioner<Item, Range>` struct maintains the current index into the stream `I`.  The initial index is index 0.  Each `Item` consumed increments the index by 1; each `range` consumed increments the position by `range.len()`.",null,null],[3,"SourcePosition","","Struct which represents a position in a source file.",null,null],[12,"line","","Current line of the input",109,null],[12,"column","","Current column of the input",109,null],[8,"Positioner","","Trait for tracking the current position of a `Stream`.",null,null],[16,"Position","","The type which keeps track of the position",110,null],[10,"position","","Returns the current position",110,null],[10,"update","","Updates the position given that `item` has been taken from the stream",110,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[8,"RangePositioner","","Trait for tracking the current position of a `RangeStream`.",null,null],[10,"update_range","","Updates the position given that `range` has been taken from the stream",111,{"inputs":[{"name":"self"},{"name":"range"}],"output":null}],[8,"DefaultPositioned","","Defines a default `Positioner` type for a particular `Stream` type.",null,null],[16,"Positioner","","",112,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"with_positioner","","Creates a new `State<I, X>` from an input stream and a positioner.",0,{"inputs":[{"name":"i"},{"name":"x"}],"output":{"name":"state"}}],[11,"new","","Creates a new `State<I, X>` from an input stream and its default positioner.",0,{"inputs":[{"name":"i"}],"output":{"name":"state"}}],[11,"position","","",0,null],[11,"uncons","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"indexpositioner"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",113,{"inputs":[],"output":{"name":"indexpositioner"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"indexpositioner"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"indexpositioner"}],"output":{"name":"bool"}}],[11,"position","","",113,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"update","","",113,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"new","","",113,{"inputs":[],"output":{"name":"indexpositioner"}}],[11,"new_with_position","","",113,{"inputs":[{"name":"usize"}],"output":{"name":"indexpositioner"}}],[11,"update_range","","",113,{"inputs":[{"name":"self"},{"name":"range"}],"output":null}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"sourceposition"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"cmp","","",109,{"inputs":[{"name":"self"},{"name":"sourceposition"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",109,{"inputs":[{"name":"self"},{"name":"sourceposition"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",109,{"inputs":[{"name":"self"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"le","","",109,{"inputs":[{"name":"self"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"gt","","",109,{"inputs":[{"name":"self"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"ge","","",109,{"inputs":[{"name":"self"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"default","","",109,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",109,{"inputs":[],"output":{"name":"self"}}],[11,"position","","",109,{"inputs":[{"name":"self"}],"output":{"name":"sourceposition"}}],[11,"update","","",109,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"update_range","","",109,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"uncons_range","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"uncons_while","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"distance","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[11,"range","","",0,null],[0,"easy","combine","Module containing easy to use and descriptive errors.",null,null],[3,"Errors","combine::easy","Struct which hold information about an error that occured at a specific position. Can hold multiple instances of `Error` if more that one error occured in the same position.",null,null],[12,"position","","The position where the error occurred",114,null],[12,"errors","","A vector containing specific information on what errors occurred at `position`. Usually a fully formed message contains one `Unexpected` error and one or more `Expected` errors. `Message` and `Other` may also appear (`combine` never generates these errors on its own) and may warrant custom handling.",114,null],[3,"Stream","","",null,null],[12,"0","","",115,null],[4,"Info","","Enum holding error information. Variants are defined for `Stream::Item` and `Stream::Range` as well as string variants holding easy descriptions.",null,null],[13,"Token","","",116,null],[13,"Range","","",116,null],[13,"Owned","","",116,null],[13,"Borrowed","","",116,null],[4,"Error","","Enum used to store information about an error that has occurred during parsing.",null,null],[13,"Unexpected","","Error indicating an unexpected token has been encountered in the stream",117,null],[13,"Expected","","Error indicating that the parser expected something else",117,null],[13,"Message","","Generic message",117,null],[13,"Other","","Variant for containing other types of errors",117,null],[6,"StreamErrors","","Alias over `ParseError` for `StreamOnce` types",null,null],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",116,{"inputs":[{"name":"primitiveinfo"}],"output":{"name":"self"}}],[11,"map_token","","",116,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"info"}}],[11,"map_range","","",116,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"info"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"info"}],"output":{"name":"bool"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",116,{"inputs":[{"name":"char"}],"output":{"generics":["char"],"name":"info"}}],[11,"from","","",116,{"inputs":[{"name":"string"}],"output":{"name":"info"}}],[11,"from","","",116,{"inputs":[{"name":"str"}],"output":{"name":"info"}}],[11,"from","","",116,{"inputs":[{"name":"u8"}],"output":{"generics":["u8"],"name":"info"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",117,{"inputs":[{"name":"easyerror"}],"output":{"name":"self"}}],[11,"unexpected_token","","",117,{"inputs":[{"name":"item"}],"output":{"name":"self"}}],[11,"unexpected_range","","",117,{"inputs":[{"name":"range"}],"output":{"name":"self"}}],[11,"unexpected_message","","",117,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"unexpected_static_message","","",117,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"expected_token","","",117,{"inputs":[{"name":"item"}],"output":{"name":"self"}}],[11,"expected_range","","",117,{"inputs":[{"name":"range"}],"output":{"name":"self"}}],[11,"expected_message","","",117,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"expected_static_message","","",117,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"message_message","","",117,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"message_static_message","","",117,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"message_token","","",117,{"inputs":[{"name":"item"}],"output":{"name":"self"}}],[11,"message_range","","",117,{"inputs":[{"name":"range"}],"output":{"name":"self"}}],[11,"other","","",117,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"into_other","","",117,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"empty","","",117,{"inputs":[{"name":"position"}],"output":{"name":"self"}}],[11,"from_error","","",117,null],[11,"set_position","","",117,{"inputs":[{"name":"self"},{"name":"position"}],"output":null}],[11,"add","","",117,null],[11,"set_expected","","",117,null],[11,"into_other","","",117,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"empty","","",114,{"inputs":[{"name":"position"}],"output":{"name":"self"}}],[11,"from_error","","",114,null],[11,"set_position","","",114,{"inputs":[{"name":"self"},{"name":"position"}],"output":null}],[11,"merge","","",114,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",114,null],[11,"set_expected","","",114,null],[11,"into_other","","",114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"map_token","","",117,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"map_range","","",117,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from","","",117,{"inputs":[{"name":"e"}],"output":{"name":"error"}}],[11,"end_of_input","","Returns the `end_of_input` error.",117,{"inputs":[],"output":{"name":"error"}}],[11,"fmt_errors","","Formats a slice of errors in a human readable way.",117,null],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"errors"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"errors"}],"output":{"name":"bool"}}],[11,"new","","Constructs a new `ParseError` which occurred at `position`.",114,{"inputs":[{"name":"p"},{"name":"error"}],"output":{"name":"errors"}}],[11,"empty","","Constructs an error with no other information than the position it occurred at.",114,{"inputs":[{"name":"p"}],"output":{"name":"errors"}}],[11,"from_errors","","Constructs a `ParseError` with multiple causes.",114,{"inputs":[{"name":"p"},{"generics":["error"],"name":"vec"}],"output":{"name":"errors"}}],[11,"end_of_input","","Constructs an end of input error. Should be returned by parsers which encounter end of input unexpectedly.",114,{"inputs":[{"name":"p"}],"output":{"name":"errors"}}],[11,"add_error","","Adds an error if `error` does not exist in this `ParseError` already (as determined byte `PartialEq`).",114,{"inputs":[{"name":"self"},{"name":"error"}],"output":null}],[11,"set_expected","","Remvoes all `Expected` errors in `self` and adds `info` instead.",114,{"inputs":[{"name":"self"},{"name":"info"}],"output":null}],[11,"merge","","Merges two `ParseError`s. If they exist at the same position the errors of `other` are added to `self` (using `add_error` to skip duplicates). If they are not at the same position the error furthest ahead are returned, ignoring the other `ParseError`.",114,{"inputs":[{"name":"self"},{"name":"errors"}],"output":{"name":"errors"}}],[11,"map_position","","Maps the position to a new value",114,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"errors"}}],[11,"map_token","","Maps all token variants to a new value",114,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"errors"}}],[11,"map_range","","Maps all range variants to a new value.",114,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"errors"}}],[11,"description","","",114,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"uncons","","",115,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"uncons_range","","",115,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"uncons_while","","",115,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"distance","","",115,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[11,"position","","",115,null],[11,"range","","",115,null],[0,"buffered_stream","combine","",null,null],[3,"BufferedStreamRef","combine::buffered_stream","A `BufferedStreamRef` wraps an instance `StreamOnce`, allowing it to be used as a `Stream`.",null,null],[3,"BufferedStream","","",null,null],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"bufferedstreamref"}}],[11,"new","","Constructs a new `BufferedStream` froma a `StreamOnce` instance with a `lookahead` number of elements that can be stored in the buffer.",119,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"bufferedstream"}}],[11,"as_stream","","Creates a `BufferedStreamRef` which implements `Stream`.",119,{"inputs":[{"name":"self"}],"output":{"name":"bufferedstreamref"}}],[11,"position","","",118,null],[11,"uncons","","",118,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"ConsumedResult","combine","A `Result` type which has the consumed status flattened into the result. Conversions to and from `std::result::Result` can be done using `result.into()` or `From::from(result)`",null,null],[6,"ParseResult","","A type alias over the specific `Result` type used by parsers to indicate wether they were successful or not. `O` is the type that is output on success. `I` is the specific stream type used in the parser.",null,null],[8,"ParseError","","Trait which defines a gluon parse error.",null,null],[16,"StreamError","","",11,null],[10,"empty","","Constructs an empty error.",11,{"inputs":[{"name":"position"}],"output":{"name":"self"}}],[10,"from_error","","Creates a `ParseError` from a single `Self::StreamError`",11,null],[10,"set_position","","Sets the position of this `ParseError`",11,{"inputs":[{"name":"self"},{"name":"position"}],"output":null}],[11,"merge","","Merges two errors. If they exist at the same position the errors of `other` are added to `self` (using the semantics of `add`). If they are not at the same position the error furthest ahead are returned, ignoring the other `ParseError`.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"add","","Adds a `StreamError` to `self`.",11,null],[11,"add_expected","","",11,{"inputs":[{"name":"self"},{"name":"info"}],"output":null}],[11,"add_unexpected","","",11,{"inputs":[{"name":"self"},{"name":"info"}],"output":null}],[11,"add_message","","",11,{"inputs":[{"name":"self"},{"name":"info"}],"output":null}],[10,"set_expected","","Sets `info` as the only `Expected` error of `self`",11,null],[10,"into_other","","Does a best-effort conversion of `self` into another `ParseError`",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Parser","","By implementing the `Parser` trait a type says that it can be used to parse an input stream into the type `Output`.",null,null],[16,"Input","","The type which is taken as input for the parser. The type must implement the `Stream` trait which allows the parser to read items from the type.",17,null],[16,"Output","","The type which is returned if the parser is successful.",17,null],[11,"easy_parse","","Entry point of the parser. Takes some input and tries to parse it.",17,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["streamerrors"],"name":"result"}}],[11,"parse","","Entry point of the parser. Takes some input and tries to parse it.",17,null],[11,"parse_stream","","Parses using the stream `input` by calling [`Stream::uncons`] one or more times.",17,null],[11,"parse_stream_consumed","","Parses using the stream `input` by calling [`Stream::uncons`] one or more times.",17,null],[11,"parse_lazy","","Parses using the stream `input` by calling [`Stream::uncons`] one or more times.",17,null],[11,"add_error","","Adds the first error that would normally be returned by this parser if it failed with an `EmptyErr` result.",17,{"inputs":[{"name":"self"},{"name":"tracked"}],"output":null}],[11,"by_ref","","Borrows a parser instead of consuming it.",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"with","","Discards the value of the `self` parser and returns the value of `p`. Fails if any of the parsers fails.",17,{"inputs":[{"name":"self"},{"name":"p2"}],"output":{"name":"with"}}],[11,"skip","","Discards the value of the `p` parser and returns the value of `self`. Fails if any of the parsers fails.",17,{"inputs":[{"name":"self"},{"name":"p2"}],"output":{"name":"skip"}}],[11,"and","","Parses with `self` followed by `p`. Succeeds if both parsers succeed, otherwise fails. Returns a tuple with both values on success.",17,null],[11,"or","","Returns a parser which attempts to parse using `self`. If `self` fails without consuming any input it tries to consume the same input using `p`.",17,{"inputs":[{"name":"self"},{"name":"p2"}],"output":{"name":"or"}}],[11,"then","","Parses using `self` and then passes the value to `f` which returns a parser used to parse the rest of the input.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"map","","Uses `f` to map over the parsed value.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"flat_map","","Uses `f` to map over the output of `self`. If `f` returns an error the parser fails.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"message","","Parses with `self` and if it fails, adds the message `msg` to the error.",17,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"message"}}],[11,"expected","","Parses with `self` and if it fails without consuming any input any expected errors are replaced by `msg`. `msg` is then used in error messages as \"Expected `msg`\".",17,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"expected"}}],[11,"and_then","","Parses with `self` and applies `f` on the result if `self` parses successfully. `f` may optionally fail with an error which is automatically converted to a `ParseError`.",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"iter","","Creates an iterator from a parser and a state. Can be used as an alternative to [`many`] when collecting directly into a `FromIterator` type is not desirable.",17,null],[11,"boxed","","Turns the parser into a trait object by putting it in a `Box`. Can be used to easily return parsers from functions without naming the type.",17,{"inputs":[{"name":"self"}],"output":{"generics":["parser"],"name":"box"}}],[11,"left","","Wraps the parser into the `Either` enum which allows combinators such as `then` to return multiple different parser types (merging them to one)",17,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"right","","Wraps the parser into the `Either` enum which allows combinators such as `then` to return multiple different parser types (merging them to one)",17,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[8,"Positioned","","",null,null],[10,"position","","Returns the current position of the stream.",12,null],[8,"Stream","","A stream of tokens which can be duplicated",null,null],[8,"StreamOnce","","`StreamOnce` represents a sequence of items that can be extracted one by one.",null,null],[16,"Item","","The type of items which is yielded from this stream.",13,null],[16,"Range","","The type of a range of items yielded from this stream. Types which do not a have a way of yielding ranges of items should just use the `Self::Item` for this type.",13,null],[16,"Position","","Type which represents the position in a stream. `Ord` is required to allow parsers to determine which of two positions are further ahead.",13,null],[16,"Error","","",13,null],[10,"uncons","","Takes a stream and removes its first item, yielding the item and the rest of the elements. Returns `Err` if no element could be retrieved.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[14,"parser","","Declares a named parser which can easily be reused.",null,null],[14,"ctry","","",null,null],[14,"choice","","Takes a number of parsers and tries to apply them each in order. Fails if all the parsers fails or if an applied parser consumes input before failing.",null,null],[14,"struct_parser","","Sequences multiple parsers and builds a struct out of them.",null,null]],"paths":[[3,"State"],[3,"PointerOffset"],[3,"SliceStream"],[3,"Tracked"],[4,"Consumed"],[4,"Info"],[4,"EasyError"],[4,"UnexpectedParse"],[4,"StringStreamError"],[4,"FastResult"],[8,"StreamError"],[8,"ParseError"],[8,"Positioned"],[8,"StreamOnce"],[8,"RangeStreamOnce"],[8,"FullRangeStream"],[8,"Range"],[8,"Parser"],[3,"IteratorStream"],[3,"ReadStream"],[6,"ConsumedResult"],[3,"SkipCount"],[3,"SkipCountMinMax"],[3,"NotFollowedBy"],[8,"ChoiceParser"],[3,"Any"],[3,"Satisfy"],[3,"SatisfyMap"],[3,"Token"],[3,"Tokens"],[3,"Position"],[3,"OneOf"],[3,"NoneOf"],[3,"Count"],[3,"Choice"],[3,"CountMinMax"],[3,"Unexpected"],[3,"Value"],[3,"Eof"],[3,"Iter"],[3,"Many"],[3,"Many1"],[3,"SkipMany"],[3,"SkipMany1"],[3,"SepBy"],[3,"SepBy1"],[3,"SepEndBy"],[3,"SepEndBy1"],[3,"FnParser"],[3,"Optional"],[3,"Between"],[3,"Chainl1"],[3,"Chainr1"],[3,"Try"],[3,"LookAhead"],[3,"With"],[3,"Skip"],[3,"Message"],[3,"Or"],[3,"Map"],[3,"FlatMap"],[3,"Then"],[3,"Expected"],[3,"AndThen"],[3,"EnvParser"],[3,"Recognize"],[3,"Recognize"],[3,"Range"],[3,"RecognizeWithValue"],[3,"Take"],[3,"TakeWhile"],[3,"TakeWhile1"],[3,"TakeUntilRange"],[3,"U16"],[3,"U32"],[3,"U64"],[3,"I16"],[3,"I32"],[3,"I64"],[3,"F32"],[3,"F64"],[3,"Digit"],[3,"Space"],[3,"Spaces"],[3,"Newline"],[3,"CrLf"],[3,"Tab"],[3,"Upper"],[3,"Lower"],[3,"AlphaNum"],[3,"Letter"],[3,"OctDigit"],[3,"HexDigit"],[3,"Bytes"],[3,"BytesCmp"],[3,"Digit"],[3,"Space"],[3,"Spaces"],[3,"Newline"],[3,"CrLf"],[3,"Tab"],[3,"Upper"],[3,"Lower"],[3,"AlphaNum"],[3,"Letter"],[3,"OctDigit"],[3,"HexDigit"],[3,"Str"],[3,"StrCmp"],[3,"SourcePosition"],[8,"Positioner"],[8,"RangePositioner"],[8,"DefaultPositioned"],[3,"IndexPositioner"],[3,"Errors"],[3,"Stream"],[4,"Info"],[4,"Error"],[3,"BufferedStreamRef"],[3,"BufferedStream"]]};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"read","","",0,null],[11,"read_to_end","","",0,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"fill_buf","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["irksome"] = {"doc":"","items":[[4,"Source","irksome","A message source.",null,null],[13,"Server","","A server message source.",0,null],[12,"host","irksome::Source","The server's hostname.",0,null],[13,"User","irksome","A user message source.",0,null],[12,"nick","irksome::Source","The user's nickname.",0,null],[12,"ident","","The user's identifier.",0,null],[12,"host","","The user's hostname.",0,null],[4,"MessageKind","irksome","The kind of a message.",null,null],[13,"Command","","A command.",1,null],[13,"Numeric","","A numeric reply to a command, consisting of a 3-digit number.",1,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[4,"Source"],[4,"MessageKind"]]};
initSearch(searchIndex);
